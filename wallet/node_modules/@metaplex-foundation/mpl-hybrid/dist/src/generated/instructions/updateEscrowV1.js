"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateEscrowV1 = exports.getUpdateEscrowV1InstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getUpdateEscrowV1InstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['name', (0, serializers_1.option)((0, serializers_1.string)())],
        ['uri', (0, serializers_1.option)((0, serializers_1.string)())],
        ['max', (0, serializers_1.option)((0, serializers_1.u64)())],
        ['min', (0, serializers_1.option)((0, serializers_1.u64)())],
        ['amount', (0, serializers_1.option)((0, serializers_1.u64)())],
        ['feeAmount', (0, serializers_1.option)((0, serializers_1.u64)())],
        ['solFeeAmount', (0, serializers_1.option)((0, serializers_1.u64)())],
        ['path', (0, serializers_1.option)((0, serializers_1.u16)())],
    ], { description: 'UpdateEscrowV1InstructionData' }), (value) => ({
        ...value,
        discriminator: [72, 45, 208, 14, 174, 238, 27, 95],
    }));
}
exports.getUpdateEscrowV1InstructionDataSerializer = getUpdateEscrowV1InstructionDataSerializer;
// Instruction.
function updateEscrowV1(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplHybrid', 'MPL4o4wMzndgh8T1NVDxELQCj5UQfYTYEkabX3wNKtb');
    // Accounts.
    const resolvedAccounts = {
        escrow: {
            index: 0,
            isWritable: true,
            value: input.escrow ?? null,
        },
        authority: {
            index: 1,
            isWritable: true,
            value: input.authority ?? null,
        },
        collection: {
            index: 2,
            isWritable: true,
            value: input.collection ?? null,
        },
        token: {
            index: 3,
            isWritable: false,
            value: input.token ?? null,
        },
        feeLocation: {
            index: 4,
            isWritable: false,
            value: input.feeLocation ?? null,
        },
        systemProgram: {
            index: 5,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getUpdateEscrowV1InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.updateEscrowV1 = updateEscrowV1;
//# sourceMappingURL=updateEscrowV1.js.map