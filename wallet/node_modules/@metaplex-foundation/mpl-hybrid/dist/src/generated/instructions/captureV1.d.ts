/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type CaptureV1InstructionAccounts = {
    owner: Signer;
    authority?: Signer;
    escrow: PublicKey | Pda;
    asset: PublicKey | Pda;
    collection: PublicKey | Pda;
    userTokenAccount?: PublicKey | Pda;
    escrowTokenAccount?: PublicKey | Pda;
    token: PublicKey | Pda;
    feeTokenAccount?: PublicKey | Pda;
    feeSolAccount?: PublicKey | Pda;
    feeProjectAccount: PublicKey | Pda;
    recentBlockhashes?: PublicKey | Pda;
    mplCore?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    associatedTokenProgram?: PublicKey | Pda;
};
export type CaptureV1InstructionData = {
    discriminator: Array<number>;
};
export type CaptureV1InstructionDataArgs = {};
export declare function getCaptureV1InstructionDataSerializer(): Serializer<CaptureV1InstructionDataArgs, CaptureV1InstructionData>;
export declare function captureV1(context: Pick<Context, 'eddsa' | 'identity' | 'programs'>, input: CaptureV1InstructionAccounts): TransactionBuilder;
