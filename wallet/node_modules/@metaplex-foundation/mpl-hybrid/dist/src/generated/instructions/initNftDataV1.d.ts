/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type InitNftDataV1InstructionAccounts = {
    nftData: PublicKey | Pda;
    authority?: Signer;
    asset: PublicKey | Pda;
    collection: PublicKey | Pda;
    token: PublicKey | Pda;
    feeLocation: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export type InitNftDataV1InstructionData = {
    discriminator: Array<number>;
    name: string;
    uri: string;
    max: bigint;
    min: bigint;
    amount: bigint;
    feeAmount: bigint;
    solFeeAmount: bigint;
    path: number;
};
export type InitNftDataV1InstructionDataArgs = {
    name: string;
    uri: string;
    max: number | bigint;
    min: number | bigint;
    amount: number | bigint;
    feeAmount: number | bigint;
    solFeeAmount: number | bigint;
    path: number;
};
export declare function getInitNftDataV1InstructionDataSerializer(): Serializer<InitNftDataV1InstructionDataArgs, InitNftDataV1InstructionData>;
export type InitNftDataV1InstructionArgs = InitNftDataV1InstructionDataArgs;
export declare function initNftDataV1(context: Pick<Context, 'identity' | 'programs'>, input: InitNftDataV1InstructionAccounts & InitNftDataV1InstructionArgs): TransactionBuilder;
