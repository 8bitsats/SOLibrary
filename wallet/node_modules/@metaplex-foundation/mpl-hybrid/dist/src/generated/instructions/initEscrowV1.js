"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.initEscrowV1 = exports.getInitEscrowV1InstructionDataSerializer = void 0;
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getInitEscrowV1InstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['name', (0, serializers_1.string)()],
        ['uri', (0, serializers_1.string)()],
        ['max', (0, serializers_1.u64)()],
        ['min', (0, serializers_1.u64)()],
        ['amount', (0, serializers_1.u64)()],
        ['feeAmount', (0, serializers_1.u64)()],
        ['solFeeAmount', (0, serializers_1.u64)()],
        ['path', (0, serializers_1.u16)()],
    ], { description: 'InitEscrowV1InstructionData' }), (value) => ({
        ...value,
        discriminator: [193, 10, 167, 121, 222, 6, 21, 146],
    }));
}
exports.getInitEscrowV1InstructionDataSerializer = getInitEscrowV1InstructionDataSerializer;
// Instruction.
function initEscrowV1(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplHybrid', 'MPL4o4wMzndgh8T1NVDxELQCj5UQfYTYEkabX3wNKtb');
    // Accounts.
    const resolvedAccounts = {
        escrow: {
            index: 0,
            isWritable: true,
            value: input.escrow ?? null,
        },
        authority: {
            index: 1,
            isWritable: true,
            value: input.authority ?? null,
        },
        collection: {
            index: 2,
            isWritable: false,
            value: input.collection ?? null,
        },
        token: {
            index: 3,
            isWritable: false,
            value: input.token ?? null,
        },
        feeLocation: {
            index: 4,
            isWritable: false,
            value: input.feeLocation ?? null,
        },
        feeAta: {
            index: 5,
            isWritable: true,
            value: input.feeAta ?? null,
        },
        systemProgram: {
            index: 6,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        tokenProgram: {
            index: 7,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        associatedTokenProgram: {
            index: 8,
            isWritable: false,
            value: input.associatedTokenProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    if (!resolvedAccounts.feeAta.value) {
        resolvedAccounts.feeAta.value = (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
            mint: (0, shared_1.expectPublicKey)(resolvedAccounts.token.value),
            owner: (0, shared_1.expectPublicKey)(resolvedAccounts.feeLocation.value),
        });
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.associatedTokenProgram.value) {
        resolvedAccounts.associatedTokenProgram.value = (0, umi_1.publicKey)('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getInitEscrowV1InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.initEscrowV1 = initEscrowV1;
//# sourceMappingURL=initEscrowV1.js.map