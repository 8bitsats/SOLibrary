/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type InitEscrowV1InstructionAccounts = {
    escrow: PublicKey | Pda;
    authority?: Signer;
    collection: PublicKey | Pda;
    token: PublicKey | Pda;
    feeLocation: PublicKey | Pda;
    /** The ATA for token fees to be stored */
    feeAta?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    associatedTokenProgram?: PublicKey | Pda;
};
export type InitEscrowV1InstructionData = {
    discriminator: Array<number>;
    name: string;
    uri: string;
    max: bigint;
    min: bigint;
    amount: bigint;
    feeAmount: bigint;
    solFeeAmount: bigint;
    path: number;
};
export type InitEscrowV1InstructionDataArgs = {
    name: string;
    uri: string;
    max: number | bigint;
    min: number | bigint;
    amount: number | bigint;
    feeAmount: number | bigint;
    solFeeAmount: number | bigint;
    path: number;
};
export declare function getInitEscrowV1InstructionDataSerializer(): Serializer<InitEscrowV1InstructionDataArgs, InitEscrowV1InstructionData>;
export type InitEscrowV1InstructionArgs = InitEscrowV1InstructionDataArgs;
export declare function initEscrowV1(context: Pick<Context, 'eddsa' | 'identity' | 'programs'>, input: InitEscrowV1InstructionAccounts & InitEscrowV1InstructionArgs): TransactionBuilder;
