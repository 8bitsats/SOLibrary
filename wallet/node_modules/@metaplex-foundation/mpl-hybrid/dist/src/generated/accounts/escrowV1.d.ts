/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type EscrowV1 = Account<EscrowV1AccountData>;
export type EscrowV1AccountData = {
    discriminator: Array<number>;
    collection: PublicKey;
    authority: PublicKey;
    token: PublicKey;
    feeLocation: PublicKey;
    name: string;
    uri: string;
    max: bigint;
    min: bigint;
    amount: bigint;
    feeAmount: bigint;
    solFeeAmount: bigint;
    count: bigint;
    path: number;
    bump: number;
};
export type EscrowV1AccountDataArgs = {
    collection: PublicKey;
    authority: PublicKey;
    token: PublicKey;
    feeLocation: PublicKey;
    name: string;
    uri: string;
    max: number | bigint;
    min: number | bigint;
    amount: number | bigint;
    feeAmount: number | bigint;
    solFeeAmount: number | bigint;
    count: number | bigint;
    path: number;
    bump: number;
};
export declare function getEscrowV1AccountDataSerializer(): Serializer<EscrowV1AccountDataArgs, EscrowV1AccountData>;
export declare function deserializeEscrowV1(rawAccount: RpcAccount): EscrowV1;
export declare function fetchEscrowV1(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<EscrowV1>;
export declare function safeFetchEscrowV1(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<EscrowV1 | null>;
export declare function fetchAllEscrowV1(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<EscrowV1[]>;
export declare function safeFetchAllEscrowV1(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<EscrowV1[]>;
export declare function getEscrowV1GpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<EscrowV1, {
    discriminator: Array<number>;
    collection: PublicKey;
    authority: PublicKey;
    token: PublicKey;
    feeLocation: PublicKey;
    name: string;
    uri: string;
    max: number | bigint;
    min: number | bigint;
    amount: number | bigint;
    feeAmount: number | bigint;
    solFeeAmount: number | bigint;
    count: number | bigint;
    path: number;
    bump: number;
}>;
