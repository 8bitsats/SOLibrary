"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNftDataV1GpaBuilder = exports.safeFetchAllNftDataV1 = exports.fetchAllNftDataV1 = exports.safeFetchNftDataV1 = exports.fetchNftDataV1 = exports.deserializeNftDataV1 = exports.getNftDataV1AccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getNftDataV1AccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['authority', (0, serializers_1.publicKey)()],
        ['token', (0, serializers_1.publicKey)()],
        ['feeLocation', (0, serializers_1.publicKey)()],
        ['name', (0, serializers_1.string)()],
        ['uri', (0, serializers_1.string)()],
        ['max', (0, serializers_1.u64)()],
        ['min', (0, serializers_1.u64)()],
        ['amount', (0, serializers_1.u64)()],
        ['feeAmount', (0, serializers_1.u64)()],
        ['solFeeAmount', (0, serializers_1.u64)()],
        ['count', (0, serializers_1.u64)()],
        ['path', (0, serializers_1.u16)()],
        ['bump', (0, serializers_1.u8)()],
    ], { description: 'NftDataV1AccountData' }), (value) => ({ ...value, discriminator: [73, 224, 183, 4, 17, 88, 129, 76] }));
}
exports.getNftDataV1AccountDataSerializer = getNftDataV1AccountDataSerializer;
function deserializeNftDataV1(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getNftDataV1AccountDataSerializer());
}
exports.deserializeNftDataV1 = deserializeNftDataV1;
async function fetchNftDataV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'NftDataV1');
    return deserializeNftDataV1(maybeAccount);
}
exports.fetchNftDataV1 = fetchNftDataV1;
async function safeFetchNftDataV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeNftDataV1(maybeAccount) : null;
}
exports.safeFetchNftDataV1 = safeFetchNftDataV1;
async function fetchAllNftDataV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'NftDataV1');
        return deserializeNftDataV1(maybeAccount);
    });
}
exports.fetchAllNftDataV1 = fetchAllNftDataV1;
async function safeFetchAllNftDataV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeNftDataV1(maybeAccount));
}
exports.safeFetchAllNftDataV1 = safeFetchAllNftDataV1;
function getNftDataV1GpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplHybrid', 'MPL4o4wMzndgh8T1NVDxELQCj5UQfYTYEkabX3wNKtb');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        authority: [8, (0, serializers_1.publicKey)()],
        token: [40, (0, serializers_1.publicKey)()],
        feeLocation: [72, (0, serializers_1.publicKey)()],
        name: [104, (0, serializers_1.string)()],
        uri: [null, (0, serializers_1.string)()],
        max: [null, (0, serializers_1.u64)()],
        min: [null, (0, serializers_1.u64)()],
        amount: [null, (0, serializers_1.u64)()],
        feeAmount: [null, (0, serializers_1.u64)()],
        solFeeAmount: [null, (0, serializers_1.u64)()],
        count: [null, (0, serializers_1.u64)()],
        path: [null, (0, serializers_1.u16)()],
        bump: [null, (0, serializers_1.u8)()],
    })
        .deserializeUsing((account) => deserializeNftDataV1(account))
        .whereField('discriminator', [73, 224, 183, 4, 17, 88, 129, 76]);
}
exports.getNftDataV1GpaBuilder = getNftDataV1GpaBuilder;
//# sourceMappingURL=nftDataV1.js.map