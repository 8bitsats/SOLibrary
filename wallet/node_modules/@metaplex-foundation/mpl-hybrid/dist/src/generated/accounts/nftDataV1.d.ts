/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type NftDataV1 = Account<NftDataV1AccountData>;
export type NftDataV1AccountData = {
    discriminator: Array<number>;
    authority: PublicKey;
    token: PublicKey;
    feeLocation: PublicKey;
    name: string;
    uri: string;
    max: bigint;
    min: bigint;
    amount: bigint;
    feeAmount: bigint;
    solFeeAmount: bigint;
    count: bigint;
    path: number;
    bump: number;
};
export type NftDataV1AccountDataArgs = {
    authority: PublicKey;
    token: PublicKey;
    feeLocation: PublicKey;
    name: string;
    uri: string;
    max: number | bigint;
    min: number | bigint;
    amount: number | bigint;
    feeAmount: number | bigint;
    solFeeAmount: number | bigint;
    count: number | bigint;
    path: number;
    bump: number;
};
export declare function getNftDataV1AccountDataSerializer(): Serializer<NftDataV1AccountDataArgs, NftDataV1AccountData>;
export declare function deserializeNftDataV1(rawAccount: RpcAccount): NftDataV1;
export declare function fetchNftDataV1(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<NftDataV1>;
export declare function safeFetchNftDataV1(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<NftDataV1 | null>;
export declare function fetchAllNftDataV1(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<NftDataV1[]>;
export declare function safeFetchAllNftDataV1(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<NftDataV1[]>;
export declare function getNftDataV1GpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<NftDataV1, {
    discriminator: Array<number>;
    authority: PublicKey;
    token: PublicKey;
    feeLocation: PublicKey;
    name: string;
    uri: string;
    max: number | bigint;
    min: number | bigint;
    amount: number | bigint;
    feeAmount: number | bigint;
    solFeeAmount: number | bigint;
    count: number | bigint;
    path: number;
    bump: number;
}>;
