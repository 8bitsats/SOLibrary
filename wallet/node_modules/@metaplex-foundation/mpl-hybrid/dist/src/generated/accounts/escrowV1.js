"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEscrowV1GpaBuilder = exports.safeFetchAllEscrowV1 = exports.fetchAllEscrowV1 = exports.safeFetchEscrowV1 = exports.fetchEscrowV1 = exports.deserializeEscrowV1 = exports.getEscrowV1AccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getEscrowV1AccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['collection', (0, serializers_1.publicKey)()],
        ['authority', (0, serializers_1.publicKey)()],
        ['token', (0, serializers_1.publicKey)()],
        ['feeLocation', (0, serializers_1.publicKey)()],
        ['name', (0, serializers_1.string)()],
        ['uri', (0, serializers_1.string)()],
        ['max', (0, serializers_1.u64)()],
        ['min', (0, serializers_1.u64)()],
        ['amount', (0, serializers_1.u64)()],
        ['feeAmount', (0, serializers_1.u64)()],
        ['solFeeAmount', (0, serializers_1.u64)()],
        ['count', (0, serializers_1.u64)()],
        ['path', (0, serializers_1.u16)()],
        ['bump', (0, serializers_1.u8)()],
    ], { description: 'EscrowV1AccountData' }), (value) => ({
        ...value,
        discriminator: [26, 90, 193, 218, 188, 251, 139, 211],
    }));
}
exports.getEscrowV1AccountDataSerializer = getEscrowV1AccountDataSerializer;
function deserializeEscrowV1(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getEscrowV1AccountDataSerializer());
}
exports.deserializeEscrowV1 = deserializeEscrowV1;
async function fetchEscrowV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'EscrowV1');
    return deserializeEscrowV1(maybeAccount);
}
exports.fetchEscrowV1 = fetchEscrowV1;
async function safeFetchEscrowV1(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeEscrowV1(maybeAccount) : null;
}
exports.safeFetchEscrowV1 = safeFetchEscrowV1;
async function fetchAllEscrowV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'EscrowV1');
        return deserializeEscrowV1(maybeAccount);
    });
}
exports.fetchAllEscrowV1 = fetchAllEscrowV1;
async function safeFetchAllEscrowV1(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeEscrowV1(maybeAccount));
}
exports.safeFetchAllEscrowV1 = safeFetchAllEscrowV1;
function getEscrowV1GpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplHybrid', 'MPL4o4wMzndgh8T1NVDxELQCj5UQfYTYEkabX3wNKtb');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        collection: [8, (0, serializers_1.publicKey)()],
        authority: [40, (0, serializers_1.publicKey)()],
        token: [72, (0, serializers_1.publicKey)()],
        feeLocation: [104, (0, serializers_1.publicKey)()],
        name: [136, (0, serializers_1.string)()],
        uri: [null, (0, serializers_1.string)()],
        max: [null, (0, serializers_1.u64)()],
        min: [null, (0, serializers_1.u64)()],
        amount: [null, (0, serializers_1.u64)()],
        feeAmount: [null, (0, serializers_1.u64)()],
        solFeeAmount: [null, (0, serializers_1.u64)()],
        count: [null, (0, serializers_1.u64)()],
        path: [null, (0, serializers_1.u16)()],
        bump: [null, (0, serializers_1.u8)()],
    })
        .deserializeUsing((account) => deserializeEscrowV1(account))
        .whereField('discriminator', [26, 90, 193, 218, 188, 251, 139, 211]);
}
exports.getEscrowV1GpaBuilder = getEscrowV1GpaBuilder;
//# sourceMappingURL=escrowV1.js.map