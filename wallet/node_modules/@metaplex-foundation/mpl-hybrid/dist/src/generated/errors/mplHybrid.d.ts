/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Program, ProgramError } from '@metaplex-foundation/umi';
/** InvalidCollection: Invalid Collection */
export declare class InvalidCollectionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidCollectionAuthority: Collection Authority does not match signer */
export declare class InvalidCollectionAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** RandomnessError: Error in the randomness */
export declare class RandomnessErrorError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidConstantFeeWallet: Invalid Fee Constant Wallet */
export declare class InvalidConstantFeeWalletError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidProjectFeeWallet: Invalid Project Fee Wallet */
export declare class InvalidProjectFeeWalletError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidSlotHash: Invalid SlotHash Program Account */
export declare class InvalidSlotHashError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidMplCore: Invalid MPL CORE Program Account */
export declare class InvalidMplCoreError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidCollectionAccount: Invalid Collection Account */
export declare class InvalidCollectionAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidAssetAccount: Invalid Asset Account */
export declare class InvalidAssetAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MaxMustBeGreaterThanMin: Max must be greater than Min */
export declare class MaxMustBeGreaterThanMinError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidMintAccount: Invalid Mint Account */
export declare class InvalidMintAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NumericalOverflow: Numerical Overflow */
export declare class NumericalOverflowError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export declare function getMplHybridErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export declare function getMplHybridErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null;
