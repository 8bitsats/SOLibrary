"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMplHybridErrorFromName = exports.getMplHybridErrorFromCode = exports.NumericalOverflowError = exports.InvalidMintAccountError = exports.MaxMustBeGreaterThanMinError = exports.InvalidAssetAccountError = exports.InvalidCollectionAccountError = exports.InvalidMplCoreError = exports.InvalidSlotHashError = exports.InvalidProjectFeeWalletError = exports.InvalidConstantFeeWalletError = exports.RandomnessErrorError = exports.InvalidCollectionAuthorityError = exports.InvalidCollectionError = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const codeToErrorMap = new Map();
const nameToErrorMap = new Map();
/** InvalidCollection: Invalid Collection */
class InvalidCollectionError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Collection', program, cause);
        this.name = 'InvalidCollection';
        this.code = 0x1770; // 6000
    }
}
exports.InvalidCollectionError = InvalidCollectionError;
codeToErrorMap.set(0x1770, InvalidCollectionError);
nameToErrorMap.set('InvalidCollection', InvalidCollectionError);
/** InvalidCollectionAuthority: Collection Authority does not match signer */
class InvalidCollectionAuthorityError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Collection Authority does not match signer', program, cause);
        this.name = 'InvalidCollectionAuthority';
        this.code = 0x1771; // 6001
    }
}
exports.InvalidCollectionAuthorityError = InvalidCollectionAuthorityError;
codeToErrorMap.set(0x1771, InvalidCollectionAuthorityError);
nameToErrorMap.set('InvalidCollectionAuthority', InvalidCollectionAuthorityError);
/** RandomnessError: Error in the randomness */
class RandomnessErrorError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Error in the randomness', program, cause);
        this.name = 'RandomnessError';
        this.code = 0x1772; // 6002
    }
}
exports.RandomnessErrorError = RandomnessErrorError;
codeToErrorMap.set(0x1772, RandomnessErrorError);
nameToErrorMap.set('RandomnessError', RandomnessErrorError);
/** InvalidConstantFeeWallet: Invalid Fee Constant Wallet */
class InvalidConstantFeeWalletError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Fee Constant Wallet', program, cause);
        this.name = 'InvalidConstantFeeWallet';
        this.code = 0x1773; // 6003
    }
}
exports.InvalidConstantFeeWalletError = InvalidConstantFeeWalletError;
codeToErrorMap.set(0x1773, InvalidConstantFeeWalletError);
nameToErrorMap.set('InvalidConstantFeeWallet', InvalidConstantFeeWalletError);
/** InvalidProjectFeeWallet: Invalid Project Fee Wallet */
class InvalidProjectFeeWalletError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Project Fee Wallet', program, cause);
        this.name = 'InvalidProjectFeeWallet';
        this.code = 0x1774; // 6004
    }
}
exports.InvalidProjectFeeWalletError = InvalidProjectFeeWalletError;
codeToErrorMap.set(0x1774, InvalidProjectFeeWalletError);
nameToErrorMap.set('InvalidProjectFeeWallet', InvalidProjectFeeWalletError);
/** InvalidSlotHash: Invalid SlotHash Program Account */
class InvalidSlotHashError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid SlotHash Program Account', program, cause);
        this.name = 'InvalidSlotHash';
        this.code = 0x1775; // 6005
    }
}
exports.InvalidSlotHashError = InvalidSlotHashError;
codeToErrorMap.set(0x1775, InvalidSlotHashError);
nameToErrorMap.set('InvalidSlotHash', InvalidSlotHashError);
/** InvalidMplCore: Invalid MPL CORE Program Account */
class InvalidMplCoreError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid MPL CORE Program Account', program, cause);
        this.name = 'InvalidMplCore';
        this.code = 0x1776; // 6006
    }
}
exports.InvalidMplCoreError = InvalidMplCoreError;
codeToErrorMap.set(0x1776, InvalidMplCoreError);
nameToErrorMap.set('InvalidMplCore', InvalidMplCoreError);
/** InvalidCollectionAccount: Invalid Collection Account */
class InvalidCollectionAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Collection Account', program, cause);
        this.name = 'InvalidCollectionAccount';
        this.code = 0x1777; // 6007
    }
}
exports.InvalidCollectionAccountError = InvalidCollectionAccountError;
codeToErrorMap.set(0x1777, InvalidCollectionAccountError);
nameToErrorMap.set('InvalidCollectionAccount', InvalidCollectionAccountError);
/** InvalidAssetAccount: Invalid Asset Account */
class InvalidAssetAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Asset Account', program, cause);
        this.name = 'InvalidAssetAccount';
        this.code = 0x1778; // 6008
    }
}
exports.InvalidAssetAccountError = InvalidAssetAccountError;
codeToErrorMap.set(0x1778, InvalidAssetAccountError);
nameToErrorMap.set('InvalidAssetAccount', InvalidAssetAccountError);
/** MaxMustBeGreaterThanMin: Max must be greater than Min */
class MaxMustBeGreaterThanMinError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Max must be greater than Min', program, cause);
        this.name = 'MaxMustBeGreaterThanMin';
        this.code = 0x1779; // 6009
    }
}
exports.MaxMustBeGreaterThanMinError = MaxMustBeGreaterThanMinError;
codeToErrorMap.set(0x1779, MaxMustBeGreaterThanMinError);
nameToErrorMap.set('MaxMustBeGreaterThanMin', MaxMustBeGreaterThanMinError);
/** InvalidMintAccount: Invalid Mint Account */
class InvalidMintAccountError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid Mint Account', program, cause);
        this.name = 'InvalidMintAccount';
        this.code = 0x177a; // 6010
    }
}
exports.InvalidMintAccountError = InvalidMintAccountError;
codeToErrorMap.set(0x177a, InvalidMintAccountError);
nameToErrorMap.set('InvalidMintAccount', InvalidMintAccountError);
/** NumericalOverflow: Numerical Overflow */
class NumericalOverflowError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Numerical Overflow', program, cause);
        this.name = 'NumericalOverflow';
        this.code = 0x177b; // 6011
    }
}
exports.NumericalOverflowError = NumericalOverflowError;
codeToErrorMap.set(0x177b, NumericalOverflowError);
nameToErrorMap.set('NumericalOverflow', NumericalOverflowError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getMplHybridErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap.get(code);
    return constructor ? new constructor(program, cause) : null;
}
exports.getMplHybridErrorFromCode = getMplHybridErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getMplHybridErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap.get(name);
    return constructor ? new constructor(program, cause) : null;
}
exports.getMplHybridErrorFromName = getMplHybridErrorFromName;
//# sourceMappingURL=mplHybrid.js.map